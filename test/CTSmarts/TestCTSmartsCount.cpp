#include <Kitimar/CTSmarts/CTSmarts.hpp>
#include <catch2/catch_test_macros.hpp>

using namespace Kitimar;
using namespace Kitimar::CTSmarts;

auto mockAcetateAnion()
{
    // SMILES: CC(=O)[O-]
    // Generated by SmiToMock
    auto mol = Kitimar::Molecule::MockMolecule{
        {{6,0,0,1,3,false,false},{6,0,0,3,0,false,false},{8,0,0,1,0,false,false},{8,0,-1,1,0,false,false}},
        {{0,1,1,false,false},{1,2,2,false,false},{1,3,1,false,false}}
    };
    return mol;
}

TEST_CASE("count")
{
    auto mol = mockAcetateAnion(); // CC(=O)[O-]

    // single atom
    CHECK(ctse::count<"C">(mol, ctse::Unique) == 2);
    CHECK(ctse::count<"O">(mol, ctse::Unique) == 2);
    CHECK(ctse::count<"[O-]">(mol, ctse::Unique) == 1);

    CHECK(ctse::count<"N">(mol, ctse::Unique) == 0);
    CHECK(ctse::count<"[O+]">(mol, ctse::Unique) == 0);

    // single bond
    CHECK(ctse::count<"CC">(mol, ctse::Unique) == 1);
    CHECK(ctse::count<"C=O">(mol, ctse::Unique) == 1);
    CHECK(ctse::count<"C[O-]">(mol, ctse::Unique) == 1);

    CHECK(ctse::count<"C=C">(mol, ctse::Unique) == 0);
    CHECK(ctse::count<"C#O">(mol, ctse::Unique) == 0);
    CHECK(ctse::count<"C[O+]">(mol, ctse::Unique) == 0);

    // general case
    CHECK(ctse::count<"CC(=O)[O-]">(mol, ctse::Unique) == 1);
    CHECK(ctse::count<"CC([O-])=O">(mol, ctse::Unique) == 1);
    CHECK(ctse::count<"O=C(C)[O-]">(mol, ctse::Unique) == 1);

    CHECK(ctse::count<"CC(=O)N">(mol, ctse::Unique) == 0);


    // single atom
    CHECK(ctse::count<"C">(mol, ctse::All) == 2);
    CHECK(ctse::count<"O">(mol, ctse::All) == 2);
    CHECK(ctse::count<"[O-]">(mol, ctse::All) == 1);

    CHECK(ctse::count<"N">(mol, ctse::All) == 0);
    CHECK(ctse::count<"[O+]">(mol, ctse::All) == 0);

    // single bond
    CHECK(ctse::count<"CC">(mol, ctse::All) == 2);
    CHECK(ctse::count<"C=O">(mol, ctse::All) == 1);
    CHECK(ctse::count<"C[O-]">(mol, ctse::All) == 1);

    CHECK(ctse::count<"C=C">(mol, ctse::All) == 0);
    CHECK(ctse::count<"C#O">(mol, ctse::All) == 0);
    CHECK(ctse::count<"C[O+]">(mol, ctse::All) == 0);

    // general case
    CHECK(ctse::count<"CC(~O)~O">(mol, ctse::All) == 2);
    CHECK(ctse::count<"CC(=O)[O-]">(mol, ctse::All) == 1);
    CHECK(ctse::count<"CC([O-])=O">(mol, ctse::All) == 1);
    CHECK(ctse::count<"O=C(C)[O-]">(mol, ctse::All) == 1);

    CHECK(ctse::count<"CC(=O)N">(mol, ctse::All) == 0);
}
