#include <Kitimar/CTSmarts/CTSmarts.hpp>
#include <catch2/catch_test_macros.hpp>

using namespace Kitimar;
using namespace Kitimar::CTSmarts;

auto mockAcetateAnion()
{
    // SMILES: CC(=O)[O-]
    // Generated by SmiToMock
    auto mol = Kitimar::Molecule::MockMolecule{
        {{6,0,0,1,3,false,false},{6,0,0,3,0,false,false},{8,0,0,1,0,false,false},{8,0,-1,1,0,false,false}},
        {{0,1,1,false,false},{1,2,2,false,false},{1,3,1,false,false}}
    };
    return mol;
}

TEST_CASE("match")
{
    auto mol = mockAcetateAnion(); // CC(=O)[O-]

    // single atom
    CHECK(ctse::match<"C">(mol));
    CHECK(ctse::match<"O">(mol));
    CHECK(ctse::match<"[O-]">(mol));

    CHECK(!ctse::match<"N">(mol));
    CHECK(!ctse::match<"[O+]">(mol));

    // single bond
    CHECK(ctse::match<"CC">(mol));
    CHECK(ctse::match<"C=O">(mol));
    CHECK(ctse::match<"C[O-]">(mol));

    CHECK(!ctse::match<"C=C">(mol));
    CHECK(!ctse::match<"C#O">(mol));
    CHECK(!ctse::match<"C[O+]">(mol));

    // general case
    CHECK(ctse::match<"CC(=O)[O-]">(mol));
    CHECK(ctse::match<"CC([O-])=O">(mol));
    CHECK(ctse::match<"O=C(C)[O-]">(mol));

    CHECK(!ctse::match<"CC(=O)N">(mol));
}

TEST_CASE("match_atom")
{
    auto mol = mockAcetateAnion(); // CC(=O)[O-]

    auto C0 = get_atom(mol, 0);
    auto C1 = get_atom(mol, 1);
    auto O2 = get_atom(mol, 2);
    auto O3 = get_atom(mol, 3);

    // single atom
    CHECK(ctse::match_atom<"C">(mol, C0));
    CHECK(ctse::match_atom<"C">(mol, C1));
    CHECK(ctse::match_atom<"O">(mol, O2));
    CHECK(ctse::match_atom<"[O-]">(mol, O3));

    CHECK(!ctse::match_atom<"C">(mol, O2));
    CHECK(!ctse::match_atom<"[O-]">(mol, O2));

    // single bond
    CHECK(ctse::match_atom<"CC">(mol, C0));
    CHECK(ctse::match_atom<"CC">(mol, C1));
    CHECK(ctse::match_atom<"CO">(mol, C1));
    CHECK(ctse::match_atom<"O=C">(mol, O2));
    CHECK(ctse::match_atom<"OC">(mol, O3));

    CHECK(!ctse::match_atom<"CO">(mol, C0));
    CHECK(!ctse::match_atom<"CO">(mol, O2));
    CHECK(!ctse::match_atom<"OC">(mol, C1));

    // general case
    CHECK(ctse::match_atom<"CC(=O)[O-]">(mol, C0));
    CHECK(ctse::match_atom<"C(C)(=O)[O-]">(mol, C1));
    CHECK(ctse::match_atom<"O=CO">(mol, O2));
    CHECK(ctse::match_atom<"OC=O">(mol, O3));

    CHECK(!ctse::match_atom<"CC(=O)[O-]">(mol, C1));
    CHECK(!ctse::match_atom<"C(C)(=O)[O-]">(mol, C0));
    CHECK(!ctse::match_atom<"O=CO">(mol, O3));
    CHECK(!ctse::match_atom<"OC=O">(mol, O2));
}

TEST_CASE("match_bond")
{
    auto mol = mockAcetateAnion(); // CC(=O)[O-]

    auto CC0 = get_bond(mol, 0);
    auto CO1 = get_bond(mol, 1);
    auto CO2 = get_bond(mol, 2);

    // single bond
    CHECK(ctse::match_bond<"CC">(mol, CC0));
    CHECK(ctse::match_bond<"C=O">(mol, CO1));
    CHECK(ctse::match_bond<"O=C">(mol, CO1));
    CHECK(ctse::match_bond<"CO">(mol, CO2));
    CHECK(ctse::match_bond<"OC">(mol, CO2));

    CHECK(!ctse::match_bond<"C=C">(mol, CC0));
    CHECK(!ctse::match_bond<"NC">(mol, CC0));
    CHECK(!ctse::match_bond<"CN">(mol, CC0));
    CHECK(!ctse::match_bond<"CO">(mol, CO1));
    CHECK(!ctse::match_bond<"N=O">(mol, CO1));
    CHECK(!ctse::match_bond<"C=N">(mol, CO1));
    CHECK(!ctse::match_bond<"C=O">(mol, CO2));

    // general case
    CHECK(ctse::match_bond<"CCO">(mol, CC0));
    CHECK(ctse::match_bond<"C(C)O">(mol, CC0));
    CHECK(ctse::match_bond<"O=CO">(mol, CO1));
    CHECK(ctse::match_bond<"C(=O)O">(mol, CO1));
    CHECK(ctse::match_bond<"OC=O">(mol, CO2));
    CHECK(ctse::match_bond<"C(O)=O">(mol, CO2));

    CHECK(!ctse::match_bond<"CCO">(mol, CO1));
    CHECK(!ctse::match_bond<"OCC">(mol, CC0));
    CHECK(!ctse::match_bond<"O(C)C">(mol, CC0));
    CHECK(!ctse::match_bond<"OC=O">(mol, CO1));
    CHECK(!ctse::match_bond<"C(O)=O">(mol, CO1));
    CHECK(!ctse::match_bond<"O=CO">(mol, CO2));
    CHECK(!ctse::match_bond<"C(=O)O">(mol, CO2));
}
