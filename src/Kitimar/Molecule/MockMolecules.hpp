#pragma once

#include "MockMolecule.hpp"

namespace Kitimar::Molecule {

// FIXME: move Mol template to create
#define MOCK_MOLECULE_FACTORY(name, SMILES) \
    template<Kitimar::Molecule::MockMolecule MolT = Kitimar::Molecule::MockIndexMolecule> \
    struct Mock##name \
    { \
        using Mol = MolT; \
        static constexpr inline auto smiles = SMILES; \
        static auto create() { return mock##name<Mol>(); } \
    };

    // SMILES: CC(=O)[O-]
    // Generated by SmiToMock
    template<Kitimar::Molecule::MockMolecule Mol = Kitimar::Molecule::MockIndexMolecule>
    auto mockAcetateAnion()
    {
        Mol mol;
        addMockAtom(mol, 0, 6, 0, 0, 1, 3, 0, false, false);
        addMockAtom(mol, 1, 6, 0, 0, 3, 0, 0, false, false);
        addMockAtom(mol, 2, 8, 0, 0, 1, 0, 0, false, false);
        addMockAtom(mol, 3, 8, 0, -1, 1, 0, 0, false, false);
        addMockBond(mol, 0, 0, 1, 1, false, false);
        addMockBond(mol, 1, 1, 2, 2, false, false);
        addMockBond(mol, 2, 1, 3, 1, false, false);
        return mol;
    }

    MOCK_MOLECULE_FACTORY(AcetateAnion, "CC(=O)[O-]")

    // SMILES: CCCC
    // Generated by SmiToMock
    template<Kitimar::Molecule::MockMolecule Mol = Kitimar::Molecule::MockIndexMolecule>
    auto mockButane()
    {
        Mol mol;
        addMockAtom(mol, 0, 6, 0, 0, 1, 3, 0, false, false);
        addMockAtom(mol, 1, 6, 0, 0, 2, 2, 0, false, false);
        addMockAtom(mol, 2, 6, 0, 0, 2, 2, 0, false, false);
        addMockAtom(mol, 3, 6, 0, 0, 1, 3, 0, false, false);
        addMockBond(mol, 0, 0, 1, 1, false, false);
        addMockBond(mol, 1, 1, 2, 1, false, false);
        addMockBond(mol, 2, 2, 3, 1, false, false);
        return mol;
    }

    MOCK_MOLECULE_FACTORY(Butane, "CCCC")

    // SMILES: S(=O)(=O)(C)C
    // Generated by SmiToMock
    template<Kitimar::Molecule::MockMolecule Mol = Kitimar::Molecule::MockIndexMolecule>
    auto mockSulfone()
    {
        Mol mol;
        addMockAtom(mol, 0, 16, 0, 0, 4, 0, 0, false, false);
        addMockAtom(mol, 1, 8, 0, 0, 1, 0, 0, false, false);
        addMockAtom(mol, 2, 8, 0, 0, 1, 0, 0, false, false);
        addMockAtom(mol, 3, 6, 0, 0, 1, 3, 0, false, false);
        addMockAtom(mol, 4, 6, 0, 0, 1, 3, 0, false, false);
        addMockBond(mol, 0, 0, 1, 2, false, false);
        addMockBond(mol, 1, 0, 2, 2, false, false);
        addMockBond(mol, 2, 0, 3, 1, false, false);
        addMockBond(mol, 3, 0, 4, 1, false, false);
        return mol;
    }

    MOCK_MOLECULE_FACTORY(Sulfone, "S(=O)(=O)(C)C")

    // SMILES: S(=O)(=O)(C)N
    // Generated by SmiToMock
    template<Kitimar::Molecule::MockMolecule Mol = Kitimar::Molecule::MockIndexMolecule>
    auto mockSulfonAmide()
    {
        Mol mol;
        addMockAtom(mol, 0, 16, 0, 0, 4, 0, 0, false, false);
        addMockAtom(mol, 1, 8, 0, 0, 1, 0, 0, false, false);
        addMockAtom(mol, 2, 8, 0, 0, 1, 0, 0, false, false);
        addMockAtom(mol, 3, 6, 0, 0, 1, 3, 0, false, false);
        addMockAtom(mol, 4, 7, 0, 0, 1, 2, 0, false, false);
        addMockBond(mol, 0, 0, 1, 2, false, false);
        addMockBond(mol, 1, 0, 2, 2, false, false);
        addMockBond(mol, 2, 0, 3, 1, false, false);
        addMockBond(mol, 3, 0, 4, 1, false, false);
        return mol;
    }

    MOCK_MOLECULE_FACTORY(SulfonAmide, "S(=O)(=O)(C)N")

} // namespace Kitimar::Molecule
