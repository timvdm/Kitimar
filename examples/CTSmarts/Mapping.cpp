#include <Kitimar/CTSmarts/CTSmarts.hpp>
#include <Kitimar/Molecule/MockMolecule.hpp>

#include <iostream>

// SMILES: Nc1ccc(N)cc1
// Generated by SmiToMock
template<Kitimar::Molecule::MockMolecule Mol = Kitimar::Molecule::MockIndexMolecule>
auto mockMolecule()
{
    Mol mol;
    addMockAtom(mol, 0, 7, 0, 0, 1, 2, 0, false, false);
    addMockAtom(mol, 1, 6, 0, 0, 3, 0, 0, true, true);
    addMockAtom(mol, 2, 6, 0, 0, 2, 1, 0, true, true);
    addMockAtom(mol, 3, 6, 0, 0, 2, 1, 0, true, true);
    addMockAtom(mol, 4, 6, 0, 0, 3, 0, 0, true, true);
    addMockAtom(mol, 5, 7, 0, 0, 1, 2, 0, false, false);
    addMockAtom(mol, 6, 6, 0, 0, 2, 1, 0, true, true);
    addMockAtom(mol, 7, 6, 0, 0, 2, 1, 0, true, true);
    addMockBond(mol, 0, 0, 1, 1, false, false);
    addMockBond(mol, 1, 1, 2, 1, true, true);
    addMockBond(mol, 2, 2, 3, 2, true, true);
    addMockBond(mol, 3, 3, 4, 1, true, true);
    addMockBond(mol, 4, 4, 5, 1, false, false);
    addMockBond(mol, 5, 4, 6, 2, true, true);
    addMockBond(mol, 6, 6, 7, 1, true, true);
    addMockBond(mol, 7, 1, 7, 2, true, true);
    return mol;
}

using namespace Kitimar;

int main()
{
    auto molecule = mockMolecule();

    // Find a single mapping.

    auto [match, single] = CTSmarts::map<"c1ccccc1">(molecule);

    std::cout << "Mapping from SMARTS \"c1ccccc1\" in SMILES \"Nc1ccc(N)cc1\":" << std::endl;
    if (match)
        for (auto i = 0UL; i < single.size(); ++i)
            std::cout << i << " -> " << single[i] << std::endl;

    // Find all unique mappings.
    // A mapping is considered unique if it's atom set is unique.

    auto unique = CTSmarts::maps<"Nc1ccccc1">(molecule);

    std::cout << "Unique mappings from SMARTS \"Nc1ccccc1\" to SMILES \"Nc1ccc(N)cc1\":" << std::endl;
    auto i = 0;
    for (const auto &map : unique) {
        std::cout << "mapping " << i++ << ":" << std::endl;
        for (auto j = 0UL; j < map.size(); ++j)
            std::cout << "    " << j << " -> " << map[j] << std::endl;
    }

    // Find all mappings.

    auto all = CTSmarts::maps<"Nc1ccccc1">(molecule, CTSmarts::All);

    std::cout << "All mappings from SMARTS \"Nc1ccccc1\" to SMILES \"Nc1ccc(N)cc1\":" << std::endl;
    i = 0;
    for (const auto &map : unique) {
        std::cout << "mapping " << i++ << ":" << std::endl;
        for (auto j = 0UL; j < map.size(); ++j)
            std::cout << "    " << j << " -> " << map[j] << std::endl;
    }
}
