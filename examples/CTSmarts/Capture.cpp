#include <Kitimar/CTSmarts/CTSmarts.hpp>
#include <Kitimar/Molecule/MockMolecule.hpp>

#include <iostream>

// SMILES: OCC(O)CO
// Generated by SmiToMock
auto molecule = Kitimar::Molecule::MockMolecule{
    {{8,0,0,1,1,false,false},{6,0,0,2,2,false,false},{6,0,0,3,1,false,false},{8,0,0,1,1,false,false},{6,0,0,2,2,false,false},{8,0,0,1,1,false,false}},
    {{0,1,1,false,false},{1,2,1,false,false},{2,3,1,false,false},{2,4,1,false,false},{4,5,1,false,false}}
};

using namespace Kitimar;

int main()
{
    // Capture all atoms for single match.

    auto [match1, C1, O1] = CTSmarts::capture<"CO">(molecule);

    std::cout << "match 1: " << match1 << std::endl;
    std::cout << "    C:1 -> " << C1 << std::endl;
    std::cout << "    O:2 -> " << O1 << std::endl;

    // Capture specified atom for single match.

    auto [match2, O2] = CTSmarts::capture<"C[O:1]">(molecule);

    std::cout << "match 2: " << match2 << std::endl;
    std::cout << "    O:1 -> " << O2 << std::endl;

    // Capture specified atoms for unique matches.

    std::cout << "match 3:" << std::endl;
    auto i = 0;
    for (auto [C3, O3] : CTSmarts::captures<"[C:1]CC[O:2]">(molecule)) {
        std::cout << "    capture " << i++ << std::endl;
        std::cout << "        C:1 -> " << C3 << std::endl;
        std::cout << "        O:2 -> " << O3 << std::endl;
    }

    // Capture all atoms for all matches.

    std::cout << "match 4:" << std::endl;
    i = 0;
    for (auto [C4a, C4b] : CTSmarts::captures<"CC">(molecule, CTSmarts::All)) {
        std::cout << "    capture " << i++ << std::endl;
        std::cout << "        C:1 -> " << C4a << std::endl;
        std::cout << "        C:2 -> " << C4b << std::endl;
    }

    // Capture all atoms for unique matches starting from a specified atom.
    // The specified atom will match the first atom in the SMARTS expression.

    std::cout << "match 5:" << std::endl;
    i = 0;
    for (auto [C5a, C5b] : CTSmarts::captures<"CC">(molecule, get_atom(molecule, 1))) {
        std::cout << "    capture " << i++ << std::endl;
        std::cout << "        C:1 -> " << C5a << std::endl;
        std::cout << "        C:2 -> " << C5b << std::endl;
    }
}
